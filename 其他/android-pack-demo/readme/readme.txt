创建工程原始内容

>> android create project --name YourProjectName --path ./p --target android-8 --package com.company.testproject --activity MainActivity
输出
Created project directory: ./p
Created directory /Users/wangliang/Documents/open/android_source_apps/mytest/p/src/com/company/testproject
Added file ./p/src/com/company/testproject/MainActivity.java
Created directory /Users/wangliang/Documents/open/android_source_apps/mytest/p/res
Created directory /Users/wangliang/Documents/open/android_source_apps/mytest/p/bin
Created directory /Users/wangliang/Documents/open/android_source_apps/mytest/p/libs
Created directory /Users/wangliang/Documents/open/android_source_apps/mytest/p/res/values
Added file ./p/res/values/strings.xml
Created directory /Users/wangliang/Documents/open/android_source_apps/mytest/p/res/layout
Added file ./p/res/layout/main.xml
Added file ./p/AndroidManifest.xml
Added file ./p/build.xml
Added file ./p/proguard-project.txt

build.xml、proguard-project.txt；其实还有ant.properties、local.properties、project.properties



ant.properties:
	////////////////////////////////////////////////////////////////////////////////////////////////////
	# This file is used to override default values used by the Ant build system.
	#
	# This file must be checked into Version Control Systems, as it is
	# integral to the build system of your project.
	
	# This file is only used by the Ant script.
	
	# You can use this to override default values such as
	#  'source.dir' for the location of your java source folder and
	#  'out.dir' for the location of your output folder.
	
	# You can also use it define how the release builds are signed by declaring
	# the following properties:
	#  'key.store' for the location of your keystore and
	#  'key.alias' for the name of the key to use.
	# The password will be asked during the build when you use the 'release' target.
	////////////////////////////////////////////////////////////////////////////////////////////////////

local.properties
	////////////////////////////////////////////////////////////////////////////////////////////////////
	# This file is automatically generated by Android Tools.
	# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
	#
	# This file must *NOT* be checked into Version Control Systems,
	# as it contains information specific to your local configuration.
	
	# location of the SDK. This is only used by Ant
	# For customization when using a Version Control System, please read the
	# header note.
	sdk.dir=/Users/wangliang/Downloads/android-sdk-macosx
	////////////////////////////////////////////////////////////////////////////////////////////////////

project.properties
	////////////////////////////////////////////////////////////////////////////////////////////////////
	# This file is automatically generated by Android Tools.
	# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
	#
	# This file must be checked in Version Control Systems.
	#
	# To customize properties used by the Ant build system edit
	# "ant.properties", and override values to adapt the script to your
	# project structure.
	#
	# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
	#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
	
	# Project target.
	target=android-8
	////////////////////////////////////////////////////////////////////////////////////////////////////

proguard-project.txt
	////////////////////////////////////////////////////////////////////////////////////////////////////
	# To enable ProGuard in your project, edit project.properties
	# to define the proguard.config property as described in that file.
	#
	# Add project specific ProGuard rules here.
	# By default, the flags in this file are appended to flags specified
	# in ${sdk.dir}/tools/proguard/proguard-android.txt
	# You can edit the include path and order by changing the ProGuard
	# include property in project.properties.
	#
	# For more details, see
	#   http://developer.android.com/guide/developing/tools/proguard.html
	
	# Add any project specific keep options here:
	
	# If your project uses WebView with JS, uncomment the following
	# and specify the fully qualified class name to the JavaScript interface
	# class:
	#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
	#   public *;
	#}
	////////////////////////////////////////////////////////////////////////////////////////////////////
build.xml
////////////////////////////////////////////////////////////////////////////////////////////////////
<?xml version="1.0" encoding="UTF-8"?>
<project name="YourProjectName" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- if sdk.dir was not set from one of the property file, then
         get it from the ANDROID_HOME env var.
         This must be done before we load project.properties since
         the proguard config can use sdk.dir -->
    <property environment="env" />
    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
        <isset property="env.ANDROID_HOME" />
    </condition>

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
            unless="sdk.dir"
    />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true" />

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>


精简
<?xml version="1.0" encoding="UTF-8"?>
<project name="YourProjectName" default="help">

    <property file="local.properties" />	//'android' tool.使用，包含路径
    <property file="ant.properties" />		//我们能够创建'android' tool能够编辑
    <property environment="env" />
    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
        <isset property="env.ANDROID_HOME" />
    </condition>
    <loadproperties srcFile="project.properties" />

    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
            unless="sdk.dir"
    />
    <import file="custom_rules.xml" optional="true" />

    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>

////////////////////////////////////////////////////////////////////////////////////////////////////

例子
////////////////////////////////////////////////////////////////////////////////////////////////////
debug模式创建
	android update project -p .
	// Clean the project
	ant clean
	// Build a debug version
	ant debug
	// Builds the debug version and installs it
	ant debug install
	//You can also start your application via the command line. For this you use adb shell to send an intent to your Activity. 
	adb shell am start -a android.intent.action.MAIN -n de.vogella.android.build.firstant/.MainActivity 

正式环境，创建ant.properties文件
If you want to release your application you can create the ant.properties file in your project directory. In this file you point to your signing key and the alias for it.
	
	key.store=path/to/my.keystore
	key.alias=mykeystore 
	You can now create a release build.
	
	// Build release 
	ant release 
////////////////////////////////////////////////////////////////////////////////////////////////////
ant教程http://www.vogella.com/articles/ApacheAnt/article.html


创建java模板

*******
1、在build.properties添加

	# Turn on or off logging.
	config.logging=true

*******
2、在config目录下

public class Config{
    /** Whether or not to include logging statements in the application. */
    public final static boolean LOGGING = @CONFIG.LOGGING@;
}


在源码中
public class Config{
    /** Whether or not to include logging statements in the application. */
    public final static boolean LOGGING = true;
}
*******
3、build.xml中
////////////////////////////////////////////////////////////////////////////////////////////////////////////

 <!-- Copy Config.java to our source tree, replacing custom tokens with values in build.properties. The configuration depends on "clean" because otherwise the build system will not detect changes in the configuration. -->
  <target name="config">

  <property name="config-target-path" value="${source.dir}/com/androidengineer/antbuild"/>

  <!-- Copy the configuration file, replacing tokens in the file. -->
  <copy file="config/Config.java" todir="${config-target-path}"
        overwrite="true" encoding="utf-8">
   <filterset>
    <filter token="CONFIG.LOGGING" value="${config.logging}"/>
   </filterset>
  </copy>
  
  <!-- Now set it to read-only, as we don't want people accidentally
       editing the wrong one. NOTE: This step is unnecessary, but I do
       it so the developers remember that this is not the original file. -->
  <chmod file="${config-target-path}/Config.java" perm="-w"/>
  <attrib file="${config-target-path}/Config.java" readonly="true"/>

 </target>
////////////////////////////////////////////////////////////////////////////////////////////////////////////




 